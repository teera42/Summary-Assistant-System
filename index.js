const { Client, GatewayIntentBits, Partials } = require('discord.js');
const { joinVoiceChannel, getVoiceConnection, createAudioPlayer, createAudioResource } = require('@discordjs/voice');
const fs = require('fs');
const prism = require('prism-media');
const wav = require('wav');
const googleTTS = require('google-tts-api');
const dotenv = require('dotenv');
const axios = require('axios');
const { google } = require('googleapis');
const FormData = require('form-data');

dotenv.config();

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ],
    partials: [Partials.Channel]
});

let activeStreams = new Map();
let outputPath = null;
let wavWriter = null;
let userOutputFile = null;
const recordedMembers = new Set();
client.once('ready', () => {
    console.log('‚úÖ Bot is ready!');
});

client.on('messageCreate', async (message) => {
    const command = message.content.toLowerCase();

    if (command === '!join') {
        const channel = message.member.voice.channel;
        if (!channel) return message.reply('‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô!');

        const connection = joinVoiceChannel({
            channelId: channel.id,
            guildId: channel.guild.id,
            adapterCreator: channel.guild.voiceAdapterCreator,
            selfDeaf: false,
        });
        message.reply('‚úÖ ‡∏ö‡∏≠‡∏ó‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß! ‡πÉ‡∏ä‡πâ `!record` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á');
        speak(connection, "‡∏ö‡∏≠‡∏ó‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß!");
    }
    if(command === '!randomfood'){
        const channel = message.member.voice.channel;
        const random_food_res = random_food(); // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ await ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
        const textResponse = `‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ ‡∏Ñ‡∏∑‡∏≠... üé∫ ${random_food_res} ‡∏ô‡∏±‡πà‡∏ô‡πÄ‡∏≠‡∏á!`;
        if (!channel) return message.reply( textResponse);
        const connection = joinVoiceChannel({
            channelId: channel.id,
            guildId: channel.guild.id,
            adapterCreator: channel.guild.voiceAdapterCreator,
            selfDeaf: false,
        });
        speak(connection, textResponse);
        }
    if(command === '!guide'){
        const channel = message.member.voice.channel;
        if (!channel) return message.reply('‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!');
        const connection = joinVoiceChannel({
            channelId: channel.id,
            guildId: channel.guild.id,
            adapterCreator: channel.guild.voiceAdapterCreator,
            selfDeaf: false,
        });
        speak(connection, "‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!");
    }
    if(command === '!joke'){
        const channel = message.member.voice.channel;
        if (!channel) return message.reply('‡∏â‡∏±‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏°‡∏∏‡∏Å‡∏ï‡∏•‡∏Å‡∏ô‡∏µ‡πâ ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πÇ‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ‡πÑ‡∏î‡πÇ‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå‡πÑ‡∏á 5555!');
        const connection = joinVoiceChannel({
            channelId: channel.id,
            guildId: channel.guild.id,
            adapterCreator: channel.guild.voiceAdapterCreator,
            selfDeaf: false,
        });
        speak(connection, "‡∏â‡∏±‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏°‡∏∏‡∏Å‡∏ï‡∏•‡∏Å‡∏ô‡∏µ‡πâ ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πÇ‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ‡πÑ‡∏î‡πÇ‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå‡πÑ‡∏á 5555!");
    }
    if (command === '!participants') {
        const channel = message.member.voice.channel;
        if (!channel) return message.reply('‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô!');
    
        const members = channel.members.map(member => member.displayName).join(', ');
    
        if (!members) return message.reply('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á');
    
        message.reply(`üë• ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°: ${members}`);
    }
    
    if (command === '!record') {
        const channel = message.member.voice.channel;
         if (!channel) return message.reply('‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô!');

        let connection = getVoiceConnection(channel.guild.id);
    
    // ‡∏ñ‡πâ‡∏≤‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ !join ‡∏Å‡πà‡∏≠‡∏ô
        if (!connection) {
            message.reply('‚ùå ‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á! ‡πÉ‡∏ä‡πâ `!join` ‡∏Å‡πà‡∏≠‡∏ô');
            return;
        }

        const receiver = connection.receiver;
        recordedMembers.clear();
        receiver.speaking.setMaxListeners(0);
        channel.members.forEach(member => {
            recordedMembers.add(member.displayName);
        });
        outputPath = `./recordings/recording_${Date.now()}.wav`;
        userOutputFile = fs.createWriteStream(outputPath, { highWaterMark: 1024 * 1024 });
        wavWriter = new wav.Writer({
            sampleRate: 48000,
            channels: 2,
            bitDepth: 16
        });

        wavWriter.pipe(userOutputFile);

        receiver.speaking.on('start', (userId) => {
            if (activeStreams.has(userId)) return;
            console.log(`${userId} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏π‡∏î`);
            activeStreams.set(userId, true);

            const audioReceiver = receiver.subscribe(userId, {
                end: { behavior: 'silence' }
            });

            const decoder = new prism.opus.Decoder({
                rate: 48000,
                channels: 2,
                frameSize: 1920
            });

            audioReceiver.pipe(decoder).pipe(wavWriter, { end: false });

            audioReceiver.once('end', () => {
                console.log(`üì¢ ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å ${userId} ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß`);
                activeStreams.delete(userId);
            });

            audioReceiver.once('error', (err) => {
                console.error(`‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å ${userId}:`, err);
                audioReceiver.destroy();
                activeStreams.delete(userId);
            });
        });

        message.reply('üéôÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á! ‡πÉ‡∏ä‡πâ `!stop` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î');
        speak(connection, "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß");
    }

    if (command === '!stop') {
        if (activeStreams.size === 0) {
            return message.reply('‚ùå ‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á! ‡πÉ‡∏ä‡πâ `!record` ‡∏Å‡πà‡∏≠‡∏ô');
        }
    
        const connection = getVoiceConnection(message.guild.id);
        if (connection) {
            const receiver = connection.receiver;
            if (receiver) {
                receiver.speaking.removeAllListeners('start'); // ‡∏•‡∏ö event listener ‡∏Ç‡∏≠‡∏á speaking
            }
            connection.destroy(); // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        }
    
        if (wavWriter) {
            wavWriter.end();
            userOutputFile.end();
        }

    
        activeStreams.clear();
        console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå WAV ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
    
        if (outputPath) {
            try {
                message.reply('üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...');
                const fileLink = await uploadToGoogleDrive(outputPath);
                message.channel.send(`üîó ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å Google Drive: ${fileLink}`);
                
                const transcription = await transcribeAudio(outputPath);
                message.channel.send(`üìú ‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á:\n\`\`\`${transcription}\`\`\``);
                const summary = await summarizeText(transcription,recordedMembers);
                message.channel.send(`üìë ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°:\n\`\`\`${summary}\`\`\``);
                recordedMembers.clear;
            } catch (error) {
                console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á:', error);
                message.reply('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ');
            }
        } else {
            message.reply('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å!');
        }
    }
    
});
client.on('voiceStateUpdate', (oldState, newState) => {
    const member = newState.member || oldState.member; 
    if (!member) return; 

    const displayName = member.displayName; 
    const newChannel = newState.channel;

    if (newChannel && !recordedMembers.has(displayName)) {
        recordedMembers.add(displayName);
    }
});


client.login(process.env.TOKEN);

async function speak(connection, text) {
    const url = googleTTS.getAudioUrl(text, {
        lang: 'th',
        slow: false,
        host: 'https://translate.google.com',
    });

    const player = createAudioPlayer();
    const resource = createAudioResource(url);

    player.play(resource);
    connection.subscribe(player);
}
function random_food() {
    const food = [
        '‡∏ú‡∏±‡∏î‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤', '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î', '‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á', '‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô', '‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß',
        '‡∏™‡πâ‡∏°‡∏ï‡∏≥', '‡∏´‡∏°‡∏π‡∏Å‡∏£‡∏∞‡∏ó‡∏∞', '‡∏Ç‡πâ‡∏≤‡∏ß‡∏°‡∏±‡∏ô‡πÑ‡∏Å‡πà', '‡∏õ‡∏π‡∏ú‡∏±‡∏î‡∏ú‡∏á‡∏Å‡∏∞‡∏´‡∏£‡∏µ‡πà', '‡πÑ‡∏Å‡πà‡∏ó‡∏≠‡∏î',
        '‡∏Ç‡πâ‡∏≤‡∏ß‡∏Ç‡∏≤‡∏´‡∏°‡∏π', '‡∏¢‡∏≥‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô', '‡πÅ‡∏Å‡∏á‡∏™‡πâ‡∏°', '‡∏´‡∏°‡∏π‡∏ó‡∏≠‡∏î‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°', '‡πÑ‡∏Ç‡πà‡πÄ‡∏à‡∏µ‡∏¢‡∏ß‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö'
    ];
    return food[Math.floor(Math.random() * food.length)];
}
async function uploadToGoogleDrive(filePath) {
    const auth = new google.auth.GoogleAuth({
        keyFile: 'key.json',
        scopes: ['https://www.googleapis.com/auth/drive.file'],
    });

    const drive = google.drive({ version: 'v3', auth });

    const fileMetadata = {
        name: `record_${Date.now()}.wav`,
        mimeType: 'audio/wav',
    };

    const media = {
        mimeType: 'audio/wav',
        body: fs.createReadStream(filePath),
    };

    try {
        const response = await drive.files.create({
            resource: fileMetadata,
            media: media,
            fields: 'id',
        });

        const fileId = response.data.id;

        await drive.permissions.create({
            fileId: fileId,
            resource: {
                role: 'reader',
                type: 'anyone',
            },
        });

        return `https://drive.google.com/file/d/${fileId}/view`;
    } catch (error) {
        console.error('‚ùå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw error;
    }
}

async function transcribeAudio(filePath) {
    try {
        if (!process.env.OPENAI_API_KEY) {
            throw new Error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö API Key ‡∏Ç‡∏≠‡∏á OpenAI");
        }
        const formData = new FormData();
        formData.append("file", fs.createReadStream(filePath));
        formData.append("model", "whisper-1");

        const response = await axios.post("https://api.openai.com/v1/audio/transcriptions", formData, {
            headers: {
                ...formData.getHeaders(),
                "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`
            },
                         maxContentLength: Infinity,
                        maxBodyLength: Infinity,
        });

        return response.data.text;
    } catch (error) {
        console.error("‚ùå ‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error.response?.data || error.message);
        return "";
    }
}

async function summarizeText(text, recordedMembers) {
    try {
        if (!process.env.OPENAI_API_KEY) {
            throw new Error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö API Key ‡∏Ç‡∏≠‡∏á OpenAI");
        }

        recordedMembers = recordedMembers || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";

        const prompt = `
‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î:

üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°: [‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏']
üìù ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°: [‡∏™‡∏£‡∏∏‡∏õ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°]
üë• ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°:
[‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°]

üìå ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°:
‚úÖ ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß:
[‡∏™‡∏£‡∏∏‡∏õ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à]

‚ö† ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö:
[‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö]

üéØ ‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:
[‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏õ]

‚úç ‡∏°‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°:
[‡∏Ç‡πâ‡∏≠‡∏™‡∏£‡∏∏‡∏õ ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°]

üì¢ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:
[‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ]
`;

        const response = await axios.post(
            "https://api.openai.com/v1/chat/completions",
            {
                model: "gpt-4o-mini",
                messages: [
                    { "role": "system", "content": `‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ: ${prompt}` },
                    { "role": "user", "content": `‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ :${text} ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° : ${recordedMembers}` }
                ],
                temperature: 0.7,
                max_tokens: 1024,
                top_p: 1,
                frequency_penalty: 0,
                presence_penalty: 0
            },
            {
                headers: {
                    "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`,
                    "Content-Type": "application/json"
                }
            }
        );

        const result = response.data.choices?.[0]?.message?.content || "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ";
        return result;

    } catch (error) {
        console.error("‚ùå ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error.response?.data || error.message);
        return "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ";
    }
}
