const { Client, GatewayIntentBits, Partials } = require('discord.js');
const { joinVoiceChannel, getVoiceConnection, createAudioPlayer, createAudioResource } = require('@discordjs/voice');
const fs = require('fs');
const FormData = require('form-data');
const axios = require('axios');
const prism = require('prism-media');
const wav = require('wav');
const ffmpeg = require('fluent-ffmpeg');
const googleTTS = require('google-tts-api');
const { google } = require('googleapis');
const dotenv = require('dotenv');
dotenv.config();

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ],
    partials: [Partials.Channel]
});

let activeStreams = new Set();
let wavWriter = null;
let userOutputFile = null;
let outputPath = null;

client.once('ready', () => {
    console.log('‚úÖ Bot is ready!');
});

client.on('messageCreate', async (message) => {
    const command = message.content.toLowerCase();

    if (command === '!join') {
        const channel = message.member.voice.channel;
        if (!channel) return message.reply('‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô!');

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏≠‡∏ó‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        const existingConnection = getVoiceConnection(channel.guild.id);
        if (existingConnection) {
            return message.reply('‚úÖ ‡∏ö‡∏≠‡∏ó‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß!');
        }

        // ‡∏ñ‡πâ‡∏≤‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á
        const connection = joinVoiceChannel({
            channelId: channel.id,
            guildId: channel.guild.id,
            adapterCreator: channel.guild.voiceAdapterCreator,
            selfDeaf: false,
        });

        message.reply('‚úÖ ‡∏ö‡∏≠‡∏ó‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß! ‡πÉ‡∏ä‡πâ `!record` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á');
        speak(connection, "‡∏ö‡∏≠‡∏ó‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß!");
    }
        if(command === '!randomfood'){
        const channel = message.member.voice.channel;
        if (!channel) return message.reply('‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!');
        const connection = joinVoiceChannel({
            channelId: channel.id,
            guildId: channel.guild.id,
            adapterCreator: channel.guild.voiceAdapterCreator,
            selfDeaf: false,
        });
        speak(connection, "‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!");
        }
        if(command === '!guide'){
        const channel = message.member.voice.channel;
        if (!channel) return message.reply('‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!');
        const connection = joinVoiceChannel({
            channelId: channel.id,
            guildId: channel.guild.id,
            adapterCreator: channel.guild.voiceAdapterCreator,
            selfDeaf: false,
        });
        speak(connection, "‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!");
    }
    if(command === '!joke'){
        const channel = message.member.voice.channel;
        if (!channel) return message.reply('‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πÇ‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå ‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠ ‡πÑ‡∏î‡πÇ‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå‡πÑ‡∏á!');
        const connection = joinVoiceChannel({
            channelId: channel.id,
            guildId: channel.guild.id,
            adapterCreator: channel.guild.voiceAdapterCreator,
            selfDeaf: false,
        });
        speak(connection, "‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πÇ‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå ‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠ ‡πÑ‡∏î‡πÇ‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå‡πÑ‡∏á!");
    }
    if (command === '!record') {
        const channel = message.member.voice.channel;
        if (!channel) return message.reply('‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô!');

        const connection = getVoiceConnection(channel.guild.id);
        if (!connection) return message.reply('‚ùå ‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á! ‡πÉ‡∏ä‡πâ `!join` ‡∏Å‡πà‡∏≠‡∏ô');

        const receiver = connection.receiver;
        receiver.speaking.setMaxListeners(0);

        outputPath = `combined_recording_${Date.now()}.wav`;
        userOutputFile = fs.createWriteStream(outputPath, { highWaterMark: 1024 * 1024 });

        wavWriter = new wav.Writer({
            sampleRate: 48000,
            channels: 2,
            bitDepth: 16
        });

        wavWriter.pipe(userOutputFile);

        receiver.speaking.on('start', (userId) => {
            if (activeStreams.has(userId)) return;

            console.log(`${userId} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏π‡∏î`);
            activeStreams.add(userId);

            const audioReceiver = receiver.subscribe(userId, {
                end: { behavior: 'silence' }
            });

            const decoder = new prism.opus.Decoder({
                rate: 48000,
                channels: 2,
                frameSize: 1920
            });

            audioReceiver.pipe(decoder).pipe(wavWriter, { end: false });

            audioReceiver.once('end', () => {
                console.log(`üì¢ ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å ${userId} ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß`);
                activeStreams.delete(userId);
            });

            audioReceiver.once('error', (err) => {
                console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å ${userId}:`, err);
                audioReceiver.destroy();
                activeStreams.delete(userId);
            });
        });

        message.reply(`üéôÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô! ‡πÉ‡∏ä‡πâ \`!stop\` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î`);
        speak(connection, "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß");
    }

    if (command === '!stop') {
        if (activeStreams.size === 0) {
            return message.reply('‚ùå ‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á! ‡πÉ‡∏ä‡πâ `!record` ‡∏Å‡πà‡∏≠‡∏ô');
        }

        const connection = getVoiceConnection(message.guild.id);
        if (connection) {
            const receiver = connection.receiver;
            if (receiver) {
                receiver.speaking.removeAllListeners('start');
            }
            connection.destroy();
        }

        if (wavWriter) {
            wavWriter.end();
            userOutputFile.end();
        }

        activeStreams.clear();
        console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå WAV ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');

        if (outputPath) {
            const mergedOutputPath = `merged_${outputPath}`;
        
            await mergeAudioFiles([outputPath], mergedOutputPath);
        
            try {
                message.reply('üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...');
                const fileLink = await uploadToGoogleDrive(mergedOutputPath);
                message.channel.send(`üîó ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å Google Drive: ${fileLink}`);
                const transcription = await transcribeAudio(mergedOutputPath);
                message.channel.send(`üìú ‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á:\n\`\`\`${transcription}\`\`\``);

                // Upload the merged audio file to Google Drive
            } catch (error) {
                console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á:', error);
                message.reply('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ');
            }
        } else {
            message.reply('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å!');
        }
        
    }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏û‡∏π‡∏î‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á TTS
async function speak(connection, text) {
    const url = googleTTS.getAudioUrl(text, {
        lang: 'th',
        slow: false,
        host: 'https://translate.google.com',
    });

    const player = createAudioPlayer();
    const resource = createAudioResource(url);

    player.play(resource);
    connection.subscribe(player);
}

async function transcribeAudio(filePath) {
    const formData = new FormData();
    formData.append("file", fs.createReadStream(filePath));

    try {
        const response = await axios.post("http://localhost:8000/transcribe/", formData, {
            headers: {
                ...formData.getHeaders()
            },
            maxContentLength: Infinity,
            maxBodyLength: Infinity
        });

        console.log("Transcription:", response.data.text);
        return response.data.text;
    } catch (error) {
        console.error("Error transcribing audio:", error);
    }
}

async function mergeAudioFiles(inputFiles, outputFile) {
    return new Promise((resolve, reject) => {
        ffmpeg()
            .input(inputFiles[0]) // ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå WAV ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            .audioCodec('pcm_s16le') // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ codec ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            .on('end', () => {
                console.log('‚úÖ ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
                resolve();
            })
            .on('error', (err) => {
                console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå:', err);
                reject(err);
            })
            .save(outputFile);
    });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Drive
async function uploadToGoogleDrive(filePath) {
    const auth = new google.auth.GoogleAuth({
        keyFile: 'key.json', // ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
        scopes: ['https://www.googleapis.com/auth/drive.file'],
    });

    const drive = google.drive({ version: 'v3', auth });

    const fileMetadata = {
        name: `audio_${Date.now()}.wav`, // ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Google Drive
        mimeType: 'audio/wav',
    };

    const media = {
        mimeType: 'audio/wav',
        body: fs.createReadStream(filePath),
    };

    try {
        // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Drive
        const response = await drive.files.create({
            resource: fileMetadata,
            media: media,
            fields: 'id',
        });

        const fileId = response.data.id;

        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞
        await drive.permissions.create({
            fileId: fileId,
            resource: {
                role: 'reader', 
                type: 'anyone', 
            },
        });

        const fileLink = `https://drive.google.com/file/d/${fileId}/view`;
        return fileLink;
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Drive:', error);
        throw error;
    }
}
async function  random_num() {
 let food = ['‡∏ú‡∏±‡∏Å', '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î', '‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á', '‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô', '‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß', '‡∏™‡πâ‡∏°‡∏ï‡∏≥', '‡∏´‡∏°‡∏π‡∏Å‡∏£‡∏∞‡∏ó‡∏∞', '‡∏Ç‡πâ‡∏≤‡∏ß‡∏°‡∏±‡∏ô‡πÑ‡∏Å‡πà', '‡∏õ‡∏π‡∏ú‡∏±‡∏î‡∏ú‡∏á‡∏Å‡∏∞‡∏´‡∏£‡∏µ‡πà', '‡πÑ‡∏Å‡πà‡∏ó‡∏≠‡∏î'];
    return food[Math.floor(Math.random() * food)];
}
client.login(process.env.TOKEN);

